// Generated by CoffeeScript 1.7.1
(function($, window, document) {
	var ResizeEnd, defaults, pluginName;
	pluginName = 'resizeEnd';
	defaults = {
		delay: 250
	};
	ResizeEnd = (function() {
		function ResizeEnd(el, options, callback) {
			this.el = el;
			this.settings = $.extend({}, defaults, options);
			this._defaults = defaults;
			this._name = pluginName;
			this.timeout = false;
			if (typeof options === 'function') {
				this.callback = options;
				options = this._defaults;
			} else {
				this.callback = callback;
			}
			this.init();
		}

		ResizeEnd.prototype.init = function() {
			return this.el.on('resize', function(e) {
				if (ResizeEnd.timeout === false) {
					ResizeEnd._timestart = e.timeStamp;
					ResizeEnd.timeout = true;
					return setTimeout(function(e) {
						return new ResizeEnd._execCallback(e);
					}, ResizeEnd.settings.delay);
				}
			});
		};

		ResizeEnd._execCallback = function(e) {
			console.log(e.timeStamp);
			if ((e.timeStamp - this._timestart) < this.settings.delay) {
				return setTimeout(function(e) {
					return this._execCallback(e);
				}, this.settings.delay);
			} else {
				ResizeEnd.timeout = false;
				return this.callback();
			}
		};

		return ResizeEnd;

	})();
	return $.fn[pluginName] = function(options, callback) {
		if (!$.data(this, "plugin_" + pluginName)) {
			return $.data(this, "plugin_" + pluginName, new ResizeEnd(this, options, callback));
		}
	};
})(jQuery, window, document);


/*
( ($, window, document)->
	plugin = 'resizeEnd'
	defaults =
		delay : 250

	ResizeEnd = (element, options, callback)->
		if typeof options == 'function'
			callback = options
			options = {}
		callback = callback || null
		this.element = element
		this.settings = $.extend {}, defaults, options
		this._defaults = defaults
		this._name = plugin
		this._timeout = false
		this._callback = callback
		this.init()

	ResizeEnd.prototype =
		init : ()->
			_this = this
			$el = $(this.element)
			$el.on 'resize', ()->
				_this.initResize()
		getUTCDate : (d)->
			d = d || new Date()
			curdate = Date.UTC d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(),	d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds()
			return curdate
		initResize : ()->
			_this = this
			_this.controlTime = _this.getUTCDate()
			if _this._timeout == false
				_this._timeout = true
				setTimeout ()->
					_this.runCallback _this
				, _this.settings.delay
		runCallback : (_this)->
			nowTime = _this.getUTCDate()
			if nowTime - _this.controlTime < _this.settings.delay
				setTimeout ()->
					_this.runCallback _this
				, _this.settings.delay
			else
				_this._timeout = false
				_this._callback()

	$.fn[ plugin ] = (options, callback)->
		this.each ()->
			if !$.data(this, 'plugin_' + plugin)
				$.data this, 'plugin_' + plugin, new ResizeEnd(this, options, callback)


) jQuery, window, document
 */


//# sourceMappingURL=jquery.resizeend.map
